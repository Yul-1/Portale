version: '3.8'

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
    internal: true

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  frontend_node_modules:
  django_logs:
  nginx_logs:

services:
  db:
    image: postgres:15-alpine
    container_name: ${COMPOSE_PROJECT_NAME}_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-portale_db}
      POSTGRES_USER: ${DB_USER:-portale_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-portale_user} -d ${DB_NAME:-portale_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME}_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - backend-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - USER_ID=${USER_ID:-1000}
        - GROUP_ID=${GROUP_ID:-1000}
    container_name: ${COMPOSE_PROJECT_NAME}_backend
    restart: unless-stopped
    depends_on:
      - db
      - redis
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG}
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - DB_NAME=${DB_NAME:-portale_db}
      - DB_USER=${DB_USER:-portale_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    volumes:
      - ./backend:/app
      - static_volume:/app/static
      - media_volume:/app/media
      - django_logs:/app/logs
    networks:
      - frontend-network
      - backend-network
    user: "${USER_ID:-1000}:${GROUP_ID:-1000}"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=${NODE_ENV:-development}
    container_name: ${COMPOSE_PROJECT_NAME}_frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV}
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - WDS_SOCKET_PORT=443
      - WDS_SOCKET_PATH=/ws
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    networks:
      - frontend-network

  nginx:
    image: nginx:alpine
    container_name: ${COMPOSE_PROJECT_NAME}_nginx
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_volume:/static:ro
      - media_volume:/media:ro
      - nginx_logs:/var/log/nginx
    networks:
      - frontend-network