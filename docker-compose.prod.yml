# docker-compose.prod.yml - Aggiornato con Healthcheck per Nginx

version: '3.8' # Puoi rimuovere questa riga per pulire i warning "version is obsolete"

secrets:
  db_password:
    file: ./secrets/db_password.txt
  db_user:
    file: ./secrets/db_user.txt
  django_secret_key:
    file: ./secrets/django_secret_key.txt
  redis_password:
    file: ./secrets/redis_password.txt
  email_host_password:
    file: ./secrets/email_host_password.txt

services:
  db:
    image: postgres:15-alpine
    container_name: portale_db_prod
    env_file: ./.env.production
    environment:
      POSTGRES_DB: ${DB_NAME:-portale_db}
      POSTGRES_USER: ${DB_USER:-portale_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-portale_password}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: portale_redis_prod
    env_file: ./.env.production
    command: redis-server --requirepass "$(cat /run/secrets/redis_password)"
    volumes:
      - redis_data_prod:/data
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$(cat /run/secrets/redis_password)", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    secrets:
      - redis_password

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: portale_backend_prod
    env_file: ./.env.production
    command: >
      sh -c "
        python manage.py wait_for_db &&
        python manage.py migrate --noinput &&
        python manage.py collectstatic --noinput &&
        gunicorn config.wsgi:application \
          --bind 0.0.0.0:8000 \
          --workers 3 \
          --threads 2 \
          --worker-class gthread \
          --worker-tmp-dir /dev/shm \
          --max-requests 1000 \
          --max-requests-jitter 50 \
          --timeout 120 \
          --access-logfile /app/logs/gunicorn-access.log \
          --error-logfile /app/logs/gunicorn-error.log
      "
    environment:
      ENVIRONMENT: production
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      # Tutte le altre variabili dal .env.production caricate tramite env_file
    volumes:
      - static_volume_prod:/app/staticfiles
      - media_volume_prod:/app/media
      - django_logs_prod:/app/logs
    secrets:
      - db_password
      - db_user
      - django_secret_key
      - redis_password
      - email_host_password
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - frontend-network
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/status/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    user: "portale"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL}
    container_name: portale_frontend_prod
    env_file: ./.env.production
    environment:
      NODE_ENV: production
    volumes:
      - frontend_build_prod:/usr/share/nginx/html
    networks:
      - frontend-network
    restart: unless-stopped
    user: "nginxuser"

  nginx:
    image: nginx:alpine
    container_name: portale_nginx_prod
    env_file: ./.env.production
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./secrets/ssl:/etc/nginx/ssl:ro
      - static_volume_prod:/var/www/static
      - media_volume_prod:/var/www/media
      - nginx_logs_prod:/var/log/nginx
    # AGGIUNTO: Nginx aspetta che backend e frontend siano healthy
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - frontend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  db_backup:
    image: postgres:15-alpine
    container_name: ${COMPOSE_PROJECT_NAME}_db_backup_prod
    env_file: ./.env.production
    depends_on:
      - db
    environment:
      PGPASSWORD: ${DB_PASSWORD}
      DB_USER: ${DB_USER}
      DB_NAME: ${DB_NAME:-portale_db}
      DB_HOST: db
    volumes:
      - backups_prod:/backups
    networks:
      - backend-network
    command: >
      sh -c "
        while true; do
          echo 'Creating backup...'
          pg_dump -h ${DB_HOST} -U ${DB_USER} ${DB_NAME} | gzip > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql.gz
          find /backups -type f -mtime +7 -delete
          echo 'Backup complete, sleeping for 24 hours'
          sleep 86400
        done
      "
    secrets:
      - db_password
      - db_user

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge

volumes:
  postgres_data_prod:
  redis_data_prod:
  static_volume_prod:
  media_volume_prod:
  frontend_build_prod:
  django_logs_prod:
  nginx_logs_prod:
  backups_prod: