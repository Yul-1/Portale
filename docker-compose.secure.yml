version: '3.8'

# Definizione dei secrets
secrets:
  db_password:
    file: ./secrets/db_password.txt
  db_user:
    file: ./secrets/db_user.txt
  django_secret_key:
    file: ./secrets/django_secret_key.txt
  ssl_cert:
    file: ./secrets/ssl/cert.pem
  ssl_key:
    file: ./secrets/ssl/key.pem
  redis_password:  # AGGIUNGI QUESTA RIGA
    file: ./secrets/redis_password.txt # AGGIUNGI QUESTA RIGA

# --- ASSICURATI CHE QUESTA RIGA "services:" SIA PRESENTE E ALLINEATA CORRETTAMENTE ---
services:
  # Database PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: portale_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: portale_db
      POSTGRES_USER: portale_user
      POSTGRES_PASSWORD: changeme # Questo sarà sovrascritto dal secret
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d # Per script di inizializzazione DB
    networks:
      - portale_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portale_user -d portale_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Python/Django
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.secure
    container_name: portale_backend
    restart: unless-stopped
    command: /usr/local/bin/entrypoint.sh gunicorn --bind 0.0.0.0:8000 config.wsgi:application # Modificato
    volumes:
      - ./backend:/app
      - ./backend/entrypoint.sh:/usr/local/bin/entrypoint.sh:ro # Aggiunto
      - static_volume:/static  # Modificato
      - media_volume:/media    # Modificato
    secrets:
      - db_password
      - db_user
      - django_secret_key
    environment:
      DJANGO_SECRET_KEY_FILE: /run/secrets/django_secret_key
      POSTGRES_USER_FILE: /run/secrets/db_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      DEBUG: "False" # Sarà 'False' in produzione
      ALLOWED_HOSTS: "localhost,127.0.0.1" # Da adattare in produzione
    depends_on:
      db:
        condition: service_healthy
    networks:
      - portale_network
    user: "portale"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/status/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2048M
        reservations:
          cpus: '0.5'
          memory: 1024M

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.secure
    container_name: portale_frontend
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules # Importante: previene override di node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=https://localhost/api
      - WDS_SOCKET_PORT=443
      - WDS_SOCKET_PATH=/ws
      - CHOKIDAR_USEPOLLING=true
    networks:
      - portale_network
    # Commentato per sviluppo - decommentare in produzione
    # user: "1001:1001"
    user: "react"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1024M
        reservations:
          cpus: '0.25'
          memory: 512M
    #ports:
    #  - "3000:3000" # Non esporre direttamente in produzione, Nginx farà da proxy

  # Nginx Reverse Proxy con SSL
  nginx:
    image: nginx:alpine
    container_name: portale_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.secure.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_volume:/static:ro
      - media_volume:/media:ro
      - ./secrets/ssl:/etc/nginx/ssl:ro
      - ./secrets/ssl/dhparam.pem:/etc/nginx/dhparam.pem:ro # Diffie-Hellman parameters
    secrets:
      - ssl_cert
      - ssl_key
    depends_on:
      - backend
      - frontend
    networks:
      - portale_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M

  # Redis per cache e Celery (se usati)
  redis:
    image: redis:7-alpine
    container_name: portale_redis
    restart: unless-stopped
    command: redis-server --requirepass "${REDIS_PASSWORD_FILE:-$(cat /run/secrets/redis_password)}"
    volumes:
      - redis_data:/data
    secrets:
      - redis_password 
    networks:
      - portale_network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 64M

# Definizione dei volumi
volumes:
  postgres_data:
  static_volume:
  media_volume:
  redis_data:

# Definizione delle network
networks:
  portale_network:
    driver: bridge